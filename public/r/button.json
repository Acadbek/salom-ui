{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:block",
  "title": "Button",
  "description": "A simple button component.",
  "files": [
    {
      "path": "registry/carbon/button/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-start transition-all duration-100 ease-in-out whitespace-nowrap rounded-none text-sm disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 outline-none\",\n  {\n    variants: {\n      variant: {\n        default: `bg-[oklch(55.65%_0.243_261.95)]\n          hover:bg-[oklch(50.65%_0.243_261.95)]\n          active:bg-[oklch(40.65%_0.243_261.95)]\n          text-[oklch(100.00%_0.000_0)]\n          focus:[box-shadow:inset_0_0_0_2px_oklch(55.65%_0.243_261.95),inset_0_0_0_3px_#fff]`,\n\n        destructive: `bg-[oklch(0.6_0.2_25)]\n          hover:bg-[oklch(0.55_0.2_25)] \n          active:bg-[oklch(0.45_0.2_25)] \n          text-[oklch(100.00%_0.000_0)] \n          focus:[box-shadow:inset_0_0_0_2px_var(--destructive),inset_0_0_0_3px_#ffffff]`,\n\n        tertiary: `bg-[oklch(1_0_0)] \n          hover:bg-[oklch(0.95_0_0)] \n          active:bg-[oklch(0.9_0_0)] \n          border-[1px] \n          border-[oklch(55.65%_0.243_261.95)] \n          text-[oklch(55.65%_0.243_261.95)] \n          focus:[box-shadow:inset_0_0_0_2px_oklch(1_0_0),inset_0_0_0_3px_oklch(55.65%_0.243_261.95)]`,\n\n        dark: `bg-[oklch(20.02%_0.000_0)]\n          text-[oklch(100.00%_0.000_0)]\n          active:bg-[oklch(30.02%_0.000_0)] \n          hover:bg-[oklch(0.00%_0.000_0)] \n          focus:[box-shadow:inset_0_0_0_2px_oklch(20.02%_0.000_0),inset_0_0_0_3px_oklch(100.00%_0.000_0)]`,\n\n        light: `bg-[oklch(1_0_0)]\n          hover:bg-[oklch(0.95_0_0)]\n          active:bg-[oklch(92.19%_0.000_0)]\n        `\n      },\n      size: {\n        xs: 'h-[1.5rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-xs',\n        sm: \"h-[2rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-[0.875rem]\",\n        md: 'h-[2.5rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-[0.875rem]',\n        lgp: \"h-[3rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-[0.875rem]\",\n        lge: \"h-[3rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-[1rem]\",\n        xl: 'h-[4rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-[0.875rem] pt-[1rem] items-start',\n        '2xl': 'h-[5rem] w-[12.5rem] pl-[1rem] pr-[4rem] text-[0.875rem] pt-[1rem] items-start',\n        default: \"h-[3rem] w-[12.5rem] pl-[1rem] pr-[4rem]\",\n        icon: \"h-[3rem] w-[3rem]\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n  VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const VoidButton = asChild ? Slot : \"button\"\n    return (\n      <VoidButton\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />  \n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:component"
    }
  ]
}